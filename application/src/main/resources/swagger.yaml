swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Partners"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8887"
basePath: "/v1"
tags:
- name: "partner-controller"
  description: ""
schemes:
- "https"
- "http"
paths:
  /partners:
    post:
      tags:
      - "partner-controller"
      summary: "create new partner"
      description: ""
      operationId: "createPartner"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Partner object that needs to be added "
        required: true
        schema:
          $ref: "#/definitions/PartnerRequest"
      responses:
        "201":
          description: "Partner has been created"
          schema:
            $ref: "#/definitions/PartnerResponse"
        "400":
          description: "Invalid input"
        "500":
          description: "an unexpected error occurred"
    get:
      tags:
      - "partner-controller"
      summary: "Find partner by Location"
      description: ""
      operationId: "findPartnerByLocation"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "long"
        description: "Longitude"
        required: true
        type: "integer"
        format: "inte64"
      - in: "query"
        name: "lat"
        description: "Latitude"
        required: true
        type: "integer"
        format: "inte64"
      responses:
        "200":
          description: "Partner found"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PartnerResponse"
        "404":
          description: "Partner not found"
  /partners/{id}:
    get:
      tags:
      - "partner-controller"
      summary: "Find partner by id"
      description: ""
      operationId: "findPartnerById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "Id of partner"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Partner found"
          schema:
            $ref: "#/definitions/PartnerResponse"
        "404":
          description: "Partner not found"
definitions:
  Point2D:
    type: "array"
    maxItems: 2
    minItems: 2
    items:
      type: "number"
      example: -46.57421


  MultiPolygon:
    type: "object"
    description: GeoJSon geometry
    externalDocs:
      url: http://geojson.org/geojson-spec.html#id6
    properties:
      type:
        type: "string"
        enum:
          - MultiPolygon
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "array"
            items:
              $ref: '#/definitions/Point2D'  
            example: [
  [[[30, 20], [45, 40], [10, 40], [30, 20]]], 
  [[[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]]
]       
  Point:
    type: "object"
    description: GeoJSon geometry
    externalDocs:
      url: http://geojson.org/geojson-spec.html#id2
    properties:
      type:
        type: "string"
        enum:
          - Point
      coordinates:
        $ref: '#/definitions/Point2D'
       
  
  PartnerRequest:
    type: "object"
    properties:
      tradingName:
        type: "string"
        example: "Adega da Cerveja - Pinheiros"
      ownerName:
        type: "string"
        example: "Zé da Silva"
      document: 
        type: "string"
        example: "1432132123891/0001"
      coverageArea:
        $ref: "#/definitions/MultiPolygon"
      adrress:
        $ref: "#/definitions/Point"

  
  PartnerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      tradingName:
        type: "string"
        example: "Adega da Cerveja - Pinheiros"
      ownerName:
        type: "string"
        example: "Zé da Silva"
      document: 
        type: "string"
        example: "1432132123891/0001"
      coverageArea:
        $ref: "#/definitions/MultiPolygon"
      adrress:
        $ref: "#/definitions/Point"
        
                    